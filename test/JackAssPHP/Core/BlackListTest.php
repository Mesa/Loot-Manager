<?php

namespace JackAssPHP\Core;

require_once dirname(__FILE__) . '/../../../JackAssPHP/Core/BlackList.php';
require_once dirname(__FILE__) . '/../../../Application/Model/BlackList.php';
require_once dirname(__FILE__) . '/../../../JackAssPHP/Core/Registry.php';

/**
 * Test class for BlackList.
 * Generated by PHPUnit on 2012-01-25 at 10:13:48.
 */
class BlackListTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var BlackList
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp ()
    {
        $_SERVER["REMOTE_ADDR"] = "127.0.0.1";

        $ip_map = array(
            array("127.0.0.1", array(
                    "Id" => 3,
                    "Ip" => "127.0.0.1",
                    "locked_until" => "",
                    "login_try" => 0,
                    "last_try" => ""
            ))
        );

        $dao = $this->getMockBuilder("\Application\Model\Blacklist", array("getListByIp"))
                ->disableOriginalConstructor()
                ->getMock();
        $dao->expects($this->any())
                ->method('getListByIp')
                ->will($this->returnValueMap($ip_map));

        $registry = $this->getMock("\JackAssPHP\Core\Registry");
        $this->object = new BlackList($registry, $dao);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown ()
    {
        
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testAddPenalty().
     */
    public function testAddPenalty ()
    {
        $this->assertSame(0, $this->object->getLoginTry());
        $this->object->addPenalty();
        $this->assertSame(1, $this->object->getLoginTry(),'der Aufruf von addPenalty erhÃ¶ht den "loginTry" nicht um 1');
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testAddPenalty().
     */
    public function testIsBlocked ()
    {
        $this->assertFalse($this->object->isBlocked(), 'Ip wird geblockt, obwohl diese nicht gelistet ist.');

        $_SERVER["REMOTE_ADDR"] = "127.0.0.1";

        $ip_map = array(
            array("127.0.0.1", array(
                    "Id" => 3,
                    "Ip" => "127.0.0.1",
                    "locked_until" => time() + 1000,
                    "login_try" => 2,
                    "last_try" => ""
            ))
        );

        $dao = $this->getMockBuilder("\Application\Model\Blacklist", array("getListByIp"))
                ->disableOriginalConstructor()
                ->getMock();
        $dao->expects($this->any())
                ->method('getListByIp')
                ->will($this->returnValueMap($ip_map));

        $registry = $this->getMock("\JackAssPHP\Core\Registry");
        $object = new BlackList($registry, $dao);
        $this->assertTrue($object->isBlocked(), 'Geblockte Ip wird nicht erkannt');
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testBlockIp().
     */
    public function testBlockIp ()
    {
        $this->object->blockIp();
        $this->assertTrue( $this->object->isBlocked(),'User ist nicht geblockt, nach dem Aufruf von blockIp');
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testClearIp().
     */
    public function testClearIp ()
    {
        $ip_map = array(
            array("127.0.0.1", array(
                    "Id" => 3,
                    "Ip" => "127.0.0.1",
                    "locked_until" => time() + 10000,
                    "login_try" => 6,
                    "last_try" => time() - 100
            ))
        );

        $dao = $this->getMockBuilder("\Application\Model\Blacklist", array("getListByIp"))
                ->disableOriginalConstructor()
                ->getMock();
        $dao->expects($this->any())
                ->method('getListByIp')
                ->will($this->returnValueMap($ip_map));

        $registry = $this->getMock("\JackAssPHP\Core\Registry");
        $object = new BlackList($registry, $dao);
        
        $this->assertTrue($object->isBlocked());
        $object->clearIp();
        $this->assertFalse($object->isBlocked(),'Der User ist nach dem Aufruf von clearIp immer noch geblockt');
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testGetLoginTry().
     */
    public function testGetLoginTry ()
    {
        $this->assertSame(0, $this->object->getLoginTry());
        $_SERVER["REMOTE_ADDR"] = "127.0.0.1";

        $ip_map = array(
            array("127.0.0.2", array(
                    "Id" => 3,
                    "Ip" => "127.0.0.1",
                    "locked_until" => "",
                    "login_try" => 2,
                    "last_try" => ""
            ))
        );

        $dao = $this->getMockBuilder("\Application\Model\Blacklist", array("getListByIp"))
                ->disableOriginalConstructor()
                ->getMock();
        $dao->expects($this->any())
                ->method('getListByIp')
                ->will($this->returnValueMap($ip_map));

        $registry = $this->getMock("\JackAssPHP\Core\Registry");
        $object = new BlackList($registry, $dao);
        $this->assertSame(0, $object->getLoginTry());
    }

}

?>
