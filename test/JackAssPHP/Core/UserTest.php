<?php

namespace JackAssPHP\Core;

require_once dirname(__FILE__) . '/../../../JackAssPHP/Core/DataModel.php';
require_once dirname(__FILE__) . '/../../../Application/Model/User.php';
require_once dirname(__FILE__) . '/../../../JackAssPHP/Core/Registry.php';
require_once dirname(__FILE__) . '/../../../JackAssPHP/Core/User.php';

/**
 * Test class for User.
 * Generated by PHPUnit on 2012-01-17 at 20:05:38.
 */
class UserTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var User
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp ()
    {
        $registry_map = array(
          array("WEB_ROOT", "http://localhost/"),
          array("LOGIN_REDIRECT_PATH", "login/")
        );

        $login_map = array(
            array(
                base64_encode("test"),
                hash('sha256', "test"),
                array(
                    "Id" => "2",
                    "Name" => "Admin",
                    "UserName" => base64_encode("test"),
                    "Email" => "test@test.test"
                    )
                )
        );

        $userId_map = array(
            array(1, "Admin"),
            array(2, "Test"),
            array(3, "Guest")
        );

        $guest_account = array( "Id" => 1, "Name" => "Guest", "Email" => "Guest" );
        $registry = $this->getMock("\JackAssPHP\Core\Registry",array("get"));
        $registry->expects($this->any())
             ->method('get')
             ->will($this->returnValueMap($registry_map));

        $dao = $this->getMockBuilder("Application\Model\User", array('getUserByNamePassword','getGuestAccount','getUSerNameById'))
                    ->disableOriginalConstructor()
                    ->getMock();

        $dao->expects( $this->any() )
            ->method('getUserByNamePassword')
            ->will($this->returnValueMap($login_map));

        $dao->expects( $this->any() )
            ->method('getUserNameById')
            ->will($this->returnValueMap($userId_map));

        $dao->expects( $this->any() )
            ->method('getGuestAccount')
            ->will($this->returnValue($guest_account));

        $this->object = new User($registry, $dao);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown ()
    {

    }


    /**
     * @covers {className}::{origMethodName}
     */
    public function testGetLoginName ()
    {
        /**
         * Bei dem Gast Account das kein Login Name übergeben werden
         */
        $this->assertSame('', $this->object->getLoginName(),'Der Zurückgebene Login Name ist falsch');
        /**
         * Anmelden und dann den LoginNamen abrufen
         */
        $this->object->login("test","test");
        $this->assertSame("test", $this->object->getLoginName(),'Der Zurückgebene Login Name ist falsch');
    }

    /**
     * @covers {className}::{origMethodName}
     */
    public function testLogout ()
    {
        $this->object->login("test","test");
        $this->assertTrue($this->object->isLoggedIn());
        $this->object->logout();
        $this->assertFalse($this->object->isLoggedIn());
    }

    /**
     * @covers {className}::{origMethodName}
     */
    public function testLogin ()
    {
        $this->assertFalse($this->object->login("falsch", "falsch"));
        $this->assertTrue($this->object->login("test", "test"));
        $this->assertFalse($this->object->login("", ""));
        /**
         * Login durch Session, also wenn der Benutzer sich bereits angemeldet hat
         * und eine neue Seite besucht
         */
        $registry_map = array(
          array("WEB_ROOT", "http://localhost/"),
          array("LOGIN_REDIRECT_PATH", "login/")
        );

        $login_map = array(
            array(
                base64_encode("test"),
                hash('sha256', "test"),
                array(
                    "Id" => "2",
                    "Name" => "Admin",
                    "Email" => "test@test.test"
                    )
                )
        );
        $user_map = array(
            array(2,
                array(
                    "Id" => "2",
                    "Name" => "Admin",
                    "UserName" => base64_encode("test"),
                    "Email" => "test@test.test"
                    )
            )
        );
        $guest_account = array( "Id" => 1, "Name" => "Guest", "Email" => "Guest" );
        $registry = $this->getMock("\JackAssPHP\Core\Registry",array("get"));
        $registry->expects($this->any())
             ->method('get')
             ->will($this->returnValueMap($registry_map));

        $dao = $this->getMockBuilder("Application\Model\User", array('getUserById', 'getUserByNamePassword','getGuestAccount'))
                    ->disableOriginalConstructor()
                    ->getMock();

        $dao->expects( $this->any() )
            ->method('getUserByNamePassword')
            ->will($this->returnValueMap($login_map));

        $dao->expects( $this->any() )
            ->method('getUserById')
            ->will($this->returnValueMap($user_map));

        $dao->expects( $this->any() )
            ->method('getGuestAccount')
            ->will($this->returnValue($guest_account));

        $_SESSION["user_id"] = 2;
        $object = new User($registry, $dao);
        $this->assertTrue($object->isLoggedIn());
    }

    /**
     * @covers {className}::{origMethodName}
     */
    public function testGetName ()
    {
        $this->assertSame("Guest", $this->object->getName());
        $this->object->login("test", "test");
        $this->assertSame("Admin", $this->object->getName());
    }

    /**
     * @covers {className}::{origMethodName}
     */
    public function testGetEmail ()
    {
        $this->assertSame(null, $this->object->getEmail());
        $this->object->login("test", "test");
        $this->assertSame("test@test.test", $this->object->getEmail());
    }

    /**
     * @covers {className}::{origMethodName}
     */
    public function testGetUserId ()
    {
        $this->assertSame(1, $this->object->getUserId());
        $this->object->login("test", "test");
        $this->assertSame(2, $this->object->getUserId());
    }

    /**
     * @covers {className}::{origMethodName}
     */
    public function testIsLoggedIn ()
    {
        $this->assertFalse($this->object->isLoggedIn());
        $this->object->login("test","test");
        $this->assertTrue($this->object->isLoggedIn());
    }

    public function testGetUsernameById ()
    {
        $this->assertSame("Admin", $this->object->getUserNameById(1));
        $this->assertSame("Test", $this->object->getUserNameById(2));
        $this->assertSame("Guest", $this->object->getUserNameById(3));
    }

}
